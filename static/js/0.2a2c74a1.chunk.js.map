{"version":3,"sources":["../node_modules/@loaders.gl/worker-utils/src/lib/env-utils/globals.ts","../node_modules/@loaders.gl/draco/src/lib/utils/version.ts","../node_modules/@loaders.gl/draco/src/draco-loader.ts","../node_modules/@loaders.gl/schema/src/lib/schema/impl/schema.ts","../node_modules/@loaders.gl/schema/src/lib/utils/assert.ts","../node_modules/@loaders.gl/schema/src/lib/schema/impl/field.ts","../node_modules/@loaders.gl/schema/src/lib/schema/impl/enum.ts","../node_modules/@loaders.gl/schema/src/lib/schema/impl/type.ts","../node_modules/@loaders.gl/schema/src/category/mesh/deduce-mesh-schema.ts","../node_modules/@loaders.gl/schema/src/lib/arrow/arrow-like-type-utils.ts","../node_modules/@loaders.gl/draco/src/lib/utils/get-draco-schema.ts","../node_modules/@loaders.gl/draco/src/lib/draco-parser.ts","../node_modules/@loaders.gl/schema/src/category/mesh/mesh-utils.ts","../node_modules/@loaders.gl/worker-utils/src/lib/library-utils/library-utils.ts","../node_modules/@loaders.gl/worker-utils/src/lib/env-utils/assert.ts","../node_modules/@loaders.gl/draco/src/lib/draco-module-loader.ts","../node_modules/@loaders.gl/draco/src/lib/draco-builder.ts","../node_modules/@loaders.gl/draco/src/draco-writer.ts","../node_modules/@loaders.gl/draco/src/index.ts"],"names":["globals","self","window","global","document","global_","isBrowser","process","String","browser","isWorker","importScripts","matches","orientation","version","exec","parseFloat","VERSION","DracoLoader","name","id","module","shapes","worker","extensions","mimeTypes","binary","tests","options","draco","decoderType","WebAssembly","libraryPath","extraAttributes","attributeNameEntry","undefined","Schema","constructor","fields","metadata","assert","condition","message","Error","Array","isArray","checkNames","usedNames","field","console","warn","this","Map","compareTo","other","length","i","select","columnNames","nameMap","Object","create","selectedFields","filter","selectAt","columnIndices","map","index","Boolean","assign","schemaOrFields","otherSchema","mergeMaps","fieldMap","mergedFields","values","m1","m2","Field","type","nullable","typeId","clone","toString","Type","DataType","x","Null","Int","Float","Binary","Utf8","Bool","Decimal","Date","Time","Timestamp","Interval","List","Struct","Union","FixedSizeBinary","FixedSizeList","Dictionary","NONE","toStringTag","Symbol","isSigned","bitWidth","super","Int8","Int16","Int32","Uint8","Uint16","Uint32","Precision","precision","Float32","Float64","listSize","child","children","valueType","valueField","deduceMeshField","attributeName","attribute","optionalMetadata","getArrowTypeFromTypedArray","array","Int8Array","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","value","makeMeshAttributeMetadata","result","set","byteOffset","byteStride","normalized","size","getArrowFieldFromAttribute","loaderData","makeMetadata","metadataMap","key","JSON","stringify","DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR","TEX_COORD","DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP","DracoParser","decoder","Decoder","metadataQuerier","MetadataQuerier","destroy","parseSync","arrayBuffer","buffer","DecoderBuffer","Init","byteLength","_disableAttributeTransforms","geometry_type","GetEncodedGeometryType","dracoGeometry","TRIANGULAR_MESH","Mesh","PointCloud","dracoStatus","DecodeBufferToMesh","POINT_CLOUD","DecodeBufferToPointCloud","ok","ptr","error_msg","_getDracoLoaderData","geometry","_getMeshData","boundingBox","getMeshBoundingBox","attributes","minX","Infinity","minY","minZ","maxX","maxY","maxZ","positions","len","y","z","schema","getDracoSchema","indices","namedLoaderDataAttributes","transformAttributesLoaderData","dracoAttribute","push","indicesField","loader","header","vertexCount","num_points","_getTopLevelMetadata","_getDracoAttributes","num_attributes","num_faces","dracoAttributes","attributeId","GetAttribute","_getAttributeMetadata","unique_id","attribute_type","data_type","num_components","byte_offset","byte_stride","attribute_index","quantization","_getQuantizationTransform","quantization_transform","octahedron","_getOctahedronTransform","octahedron_transform","_getMeshAttributes","topology","mode","_getTriangleStripIndices","_getTriangleListIndices","loaderAttribute","_deduceAttributeName","_getAttributeValues","numIndices","_malloc","GetTrianglesUInt32Array","HEAPF32","slice","_free","dracoArray","DracoInt32Array","GetTriangleStripsFromMesh","getUint32Array","numValues","intArray","GetValue","TypedArrayCtor","numComponents","BYTES_PER_ELEMENT","dataType","getDracoDataType","attributeType","DT_FLOAT32","DT_INT8","DT_INT16","DT_INT32","DT_UINT8","DT_UINT16","DT_UINT32","DT_INVALID","GetAttributeDataArrayForAllPoints","uniqueId","attributeUniqueId","entries","thisAttributeType","dracoAttributeConstant","entryName","string","dracoMetadata","GetMetadata","_getDracoMetadata","GetAttributeMetadata","numEntries","NumEntries","entryIndex","GetEntryName","_getDracoMetadataField","GetIntEntryArray","getInt32Array","int","GetIntEntry","GetStringEntry","double","GetDoubleEntry","quantizedAttributes","octahedronAttributes","skipAttributes","dracoAttributeName","SkipAttributeTransform","includes","transform","AttributeQuantizationTransform","InitFromAttribute","quantization_bits","range","min_values","min_value","loadLibraryPromises","async","loadLibrary","libraryUrl","moduleName","getLibraryUrl","library","startsWith","modules","CDN","loadLibraryFromFile","endsWith","response","fetch","node","loadLibraryFromString","scriptSource","eval","call","script","createElement","appendChild","createTextNode","e","text","body","DRACO_VERSION","DRACO_JS_DECODER_URL","DRACO_WASM_WRAPPER_URL","DRACO_WASM_DECODER_URL","DRACO_ENCODER_URL","loadDecoderPromise","loadEncoderPromise","loadDracoDecoderModule","draco3d","createDecoderModule","then","loadDracoDecoder","DracoDecoderModule","wasmBinary","Promise","all","globalThis","initializeDracoDecoder","resolve","onModuleLoaded","loadDracoEncoderModule","createEncoderModule","loadDracoEncoder","DracoEncoderModule","GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP","COLOR_0","TEXCOORD_0","noop","DracoBuilder","dracoEncoder","Encoder","dracoMeshBuilder","MeshBuilder","dracoMetadataBuilder","MetadataBuilder","destroyEncodedObject","object","encodeSync","mesh","log","_setOptions","pointcloud","_encodePointCloud","_encodeMesh","_getAttributesFromMesh","dracoPointCloud","_addGeometryMetadata","_createDracoPointCloud","dracoData","DracoInt8Array","encodedLen","EncodePointCloudToDracoBuffer","dracoInt8ArrayToArrayBuffer","dracoMesh","_createDracoMesh","EncodeMeshToDracoBuffer","SetSpeedOptions","speed","dracoMethod","method","SetEncodingMethod","bits","dracoPosition","SetAttributeQuantization","attributesMetadata","_getPositionAttribute","_addAttributeToMesh","_addAttributeMetadata","error","ArrayBuffer","isView","_getDracoAttributeType","numFaces","AddFacesToMesh","builder","AddInt8Attribute","AddInt16Attribute","AddInt32Attribute","Uint8ClampedArray","AddUInt8Attribute","AddUInt16Attribute","AddUInt32Attribute","AddFloatAttribute","toLowerCase","GENERIC","Metadata","_populateDracoMetadata","AddMetadata","uniqueAttributeId","dracoAttributeMetadata","SetMetadataForAttribute","getEntries","container","hasOwnProperty","Math","trunc","AddIntEntry","AddDoubleEntry","AddIntEntryArray","AddStringEntry","outputBuffer","outputData","DracoWriter","encode","data","dracoBuilder","DRACOBuilder","DracoWriterWorker","source","DracoWorkerLoader","parse","dracoParser","_TypecheckDracoLoader"],"mappings":"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","file":"static/js/0.2a2c74a1.chunk.js","sourcesContent":["// Purpose: include this in your module to avoids adding dependencies on\n// micro modules like 'global' and 'is-browser';\n\n/* eslint-disable no-restricted-globals */\nconst globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  global: typeof global !== 'undefined' && global,\n  document: typeof document !== 'undefined' && document\n};\n\nconst self_: {[key: string]: any} = globals.self || globals.window || globals.global || {};\nconst window_: {[key: string]: any} = globals.window || globals.self || globals.global || {};\nconst global_: {[key: string]: any} = globals.global || globals.self || globals.window || {};\nconst document_: {[key: string]: any} = globals.document || {};\n\nexport {self_ as self, window_ as window, global_ as global, document_ as document};\n\n/** true if running in the browser, false if running in Node.js */\nexport const isBrowser: boolean =\n  // @ts-ignore process.browser\n  typeof process !== 'object' || String(process) !== '[object process]' || process.browser;\n\n/** true if running on a worker thread */\nexport const isWorker: boolean = typeof importScripts === 'function';\n\n/** true if running on a mobile device */\nexport const isMobile: boolean =\n  typeof window !== 'undefined' && typeof window.orientation !== 'undefined';\n\n// Extract node major version\nconst matches =\n  typeof process !== 'undefined' && process.version && /v([0-9]*)/.exec(process.version);\n\n/** Version of Node.js if running under Node, otherwise 0 */\nexport const nodeVersion: number = (matches && parseFloat(matches[1])) || 0;\n","// Version constant cannot be imported, it needs to correspond to the build version of **this** module.\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nexport const VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n","import type {Loader, LoaderOptions} from '@loaders.gl/loader-utils';\nimport type {DracoParseOptions} from './lib/draco-parser';\n// import type {DracoMeshData} from './types';\nimport {VERSION} from './lib/utils/version';\n\nexport type DracoLoaderOptions = LoaderOptions & {\n  draco?: DracoParseOptions & {\n    decoderType?: 'wasm' | 'js';\n    libraryPath?: string;\n    extraAttributes?;\n    attributeNameEntry?: string;\n  };\n};\n\nconst DEFAULT_DRACO_OPTIONS: DracoLoaderOptions = {\n  draco: {\n    decoderType: typeof WebAssembly === 'object' ? 'wasm' : 'js', // 'js' for IE11\n    libraryPath: 'libs/',\n    extraAttributes: {},\n    attributeNameEntry: undefined\n  }\n};\n\n/**\n * Worker loader for Draco3D compressed geometries\n */\nexport const DracoLoader = {\n  name: 'Draco',\n  id: 'draco',\n  module: 'draco',\n  shapes: ['mesh'],\n  version: VERSION,\n  worker: true,\n  extensions: ['drc'],\n  mimeTypes: ['application/octet-stream'],\n  binary: true,\n  tests: ['DRACO'],\n  options: DEFAULT_DRACO_OPTIONS\n};\n\nexport const _TypecheckDracoLoader: Loader = DracoLoader;\n","import {assert} from '../../utils/assert';\nimport Field from './field';\n\nexport type SchemaMetadata = Map<string, any>;\n\n/**\n * ArrowJS `Schema` API-compatible class for row-based tables (returned from `DataTable`)\n * https://loaders.gl/arrowjs/docs/api-reference/schema\n */\nexport default class Schema {\n  fields: Field[];\n  // TODO - Arrow just allows Map<string, string>\n  metadata: SchemaMetadata;\n\n  constructor(fields: Field[], metadata?: SchemaMetadata) {\n    assert(Array.isArray(fields));\n    checkNames(fields);\n    // For kepler fields, create arrow compatible `Fields` that have kepler fields as `metadata`\n    this.fields = fields;\n    this.metadata = metadata || new Map();\n  }\n\n  // TODO - arrow only seems to compare fields, not metadata\n  compareTo(other: Schema): boolean {\n    if (this.metadata !== other.metadata) {\n      return false;\n    }\n    if (this.fields.length !== other.fields.length) {\n      return false;\n    }\n    for (let i = 0; i < this.fields.length; ++i) {\n      if (!this.fields[i].compareTo(other.fields[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  select(...columnNames: string[]): Schema {\n    // Ensure column names reference valid fields\n    const nameMap = Object.create(null);\n    for (const name of columnNames) {\n      nameMap[name] = true;\n    }\n    const selectedFields = this.fields.filter((field) => nameMap[field.name]);\n    return new Schema(selectedFields, this.metadata);\n  }\n\n  selectAt(...columnIndices: number[]): Schema {\n    // Ensure column indices reference valid fields\n    const selectedFields = columnIndices.map((index) => this.fields[index]).filter(Boolean);\n    return new Schema(selectedFields, this.metadata);\n  }\n\n  assign(schemaOrFields: Schema | Field[]): Schema {\n    let fields: Field[];\n    let metadata: SchemaMetadata = this.metadata;\n\n    if (schemaOrFields instanceof Schema) {\n      const otherSchema = schemaOrFields;\n      fields = otherSchema.fields;\n      metadata = mergeMaps(mergeMaps(new Map(), this.metadata), otherSchema.metadata);\n    } else {\n      fields = schemaOrFields;\n    }\n\n    // Create a merged list of fields, overwrite fields in place, new fields at end\n    const fieldMap: {[key: string]: Field} = Object.create(null);\n\n    for (const field of this.fields) {\n      fieldMap[field.name] = field;\n    }\n\n    for (const field of fields) {\n      fieldMap[field.name] = field;\n    }\n\n    const mergedFields = Object.values(fieldMap);\n\n    return new Schema(mergedFields, metadata);\n  }\n}\n\n// Warn if any duplicated field names\nfunction checkNames(fields: Field[]): void {\n  const usedNames: Record<string, boolean> = {};\n  for (const field of fields) {\n    if (usedNames[field.name]) {\n      // eslint-disable-next-line\n      console.warn('Schema: duplicated field name', field.name, field);\n    }\n    usedNames[field.name] = true;\n  }\n}\n\nfunction mergeMaps<T>(m1: T, m2: T): T {\n  // @ts-ignore\n  return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n","// Replacement for the external assert method to reduce bundle size\n// Note: We don't use the second \"message\" argument in calling code,\n// so no need to support it here\nexport function assert(condition: boolean, message?: string) {\n  if (!condition) {\n    throw new Error(message || 'loader assertion failed.');\n  }\n}\n","import {DataType} from './type';\n\n/**\n * ArrowJS `Field` API-compatible class for row-based tables\n * https://loaders.gl/arrowjs/docs/api-reference/field\n * A field holds name, nullable, and metadata information about a table \"column\"\n * A Schema is essentially a list of fields\n */\nexport default class Field {\n  name: string;\n  type: DataType;\n  nullable: boolean;\n  metadata: Map<string, string>;\n\n  constructor(\n    name: string,\n    type: DataType,\n    nullable = false,\n    metadata: Map<string, string> = new Map()\n  ) {\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata;\n  }\n\n  get typeId(): number {\n    return this.type && this.type.typeId;\n  }\n\n  clone(): Field {\n    return new Field(this.name, this.type, this.nullable, this.metadata);\n  }\n\n  compareTo(other: this): boolean {\n    return (\n      this.name === other.name &&\n      this.type === other.type &&\n      this.nullable === other.nullable &&\n      this.metadata === other.metadata\n    );\n  }\n\n  toString(): string {\n    return `${this.type}${this.nullable ? ', nullable' : ''}${\n      this.metadata ? `, metadata: ${this.metadata}` : ''\n    }`;\n  }\n}\n","// This code is adapted from ArrowJS https://github.com/apache/arrow\n// under Apache license http://www.apache.org/licenses/LICENSE-2.0\n\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport enum Type {\n  /** The default placeholder type */\n  NONE = 0,\n  /** A NULL type having no physical storage */\n  Null = 1,\n  /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n  Int = 2,\n  /** 2, 4, or 8-byte floating point value */\n  Float = 3,\n  /** Variable-length bytes (no guarantee of UTF8-ness) */\n  Binary = 4,\n  /** UTF8 variable-length string as List<Char> */\n  Utf8 = 5,\n  /** Boolean as 1 bit, LSB bit-packed ordering */\n  Bool = 6,\n  /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n  Decimal = 7,\n  /** int32_t days or int64_t milliseconds since the UNIX epoch */\n  Date = 8,\n  /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n  Time = 9,\n  /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n  Timestamp = 10,\n  /** YEAR_MONTH or DAY_TIME interval in SQL style */\n  Interval = 11,\n  /** A list of some logical data type */\n  List = 12,\n  /** Struct of logical types */\n  Struct = 13,\n  /** Union of logical types */\n  Union = 14,\n  /** Fixed-size binary. Each value occupies the same number of bytes */\n  FixedSizeBinary = 15,\n  /** Fixed-size list. Each value occupies the same number of bytes */\n  FixedSizeList = 16,\n  /** Map of named logical types */\n  Map = 17,\n\n  /** Dictionary aka Category type */\n  Dictionary = -1,\n  Int8 = -2,\n  Int16 = -3,\n  Int32 = -4,\n  Int64 = -5,\n  Uint8 = -6,\n  Uint16 = -7,\n  Uint32 = -8,\n  Uint64 = -9,\n  Float16 = -10,\n  Float32 = -11,\n  Float64 = -12,\n  DateDay = -13,\n  DateMillisecond = -14,\n  TimestampSecond = -15,\n  TimestampMillisecond = -16,\n  TimestampMicrosecond = -17,\n  TimestampNanosecond = -18,\n  TimeSecond = -19,\n  TimeMillisecond = -20,\n  TimeMicrosecond = -21,\n  TimeNanosecond = -22,\n  DenseUnion = -23,\n  SparseUnion = -24,\n  IntervalDayTime = -25,\n  IntervalYearMonth = -26\n}\n","// This code is adapted from ArrowJS https://github.com/apache/arrow\n// under Apache license http://www.apache.org/licenses/LICENSE-2.0\n\nimport {Type} from './enum';\n\nimport Field from './field';\n\nexport {Type} from './enum';\n\nexport type TypedIntArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray;\n\nexport type TypedFloatArray = Float32Array | Float64Array;\n\nexport type TypedArray = TypedIntArray | TypedFloatArray;\n\nexport type AnyArrayType = Array<any> | TypedIntArray | TypedFloatArray;\n\nexport class DataType {\n  static isNull(x: any): boolean {\n    return x && x.typeId === Type.Null;\n  }\n  static isInt(x: any): boolean {\n    return x && x.typeId === Type.Int;\n  }\n  static isFloat(x: any): boolean {\n    return x && x.typeId === Type.Float;\n  }\n  static isBinary(x: any): boolean {\n    return x && x.typeId === Type.Binary;\n  }\n  static isUtf8(x: any): boolean {\n    return x && x.typeId === Type.Utf8;\n  }\n  static isBool(x: any): boolean {\n    return x && x.typeId === Type.Bool;\n  }\n  static isDecimal(x: any): boolean {\n    return x && x.typeId === Type.Decimal;\n  }\n  static isDate(x: any): boolean {\n    return x && x.typeId === Type.Date;\n  }\n  static isTime(x: any): boolean {\n    return x && x.typeId === Type.Time;\n  }\n  static isTimestamp(x: any): boolean {\n    return x && x.typeId === Type.Timestamp;\n  }\n  static isInterval(x: any): boolean {\n    return x && x.typeId === Type.Interval;\n  }\n  static isList(x: any): boolean {\n    return x && x.typeId === Type.List;\n  }\n  static isStruct(x: any): boolean {\n    return x && x.typeId === Type.Struct;\n  }\n  static isUnion(x: any): boolean {\n    return x && x.typeId === Type.Union;\n  }\n  static isFixedSizeBinary(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeBinary;\n  }\n  static isFixedSizeList(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeList;\n  }\n  static isMap(x: any): boolean {\n    return x && x.typeId === Type.Map;\n  }\n  static isDictionary(x: any): boolean {\n    return x && x.typeId === Type.Dictionary;\n  }\n\n  get typeId(): Type {\n    return Type.NONE;\n  }\n\n  // get ArrayType(): AnyArrayType {\n  //   return Int8Array;\n  // }\n\n  // get ArrayType() { return Array; }\n  compareTo(other: DataType): boolean {\n    // TODO\n    return this === other; // comparer.visit(this, other);\n  }\n}\n\n// NULL\n\nexport class Null extends DataType {\n  get typeId(): Type {\n    return Type.Null;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Null';\n  }\n  toString(): string {\n    return 'Null';\n  }\n}\n\n// BOOLEANS\n\nexport class Bool extends DataType {\n  get typeId(): Type {\n    return Type.Bool;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Bool';\n  }\n  toString(): string {\n    return 'Bool';\n  }\n}\n\n// INTS\n\nexport class Int extends DataType {\n  readonly isSigned: boolean;\n  readonly bitWidth: number;\n  constructor(isSigned, bitWidth) {\n    super();\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Int;\n  }\n  // get ArrayType() {\n  //   switch (this.bitWidth) {\n  //     case 8:\n  //       return this.isSigned ? Int8Array : Uint8Array;\n  //     case 16:\n  //       return this.isSigned ? Int16Array : Uint16Array;\n  //     case 32:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     case 64:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Int';\n  }\n  toString(): string {\n    return `${this.isSigned ? 'I' : 'Ui'}nt${this.bitWidth}`;\n  }\n}\n\nexport class Int8 extends Int {\n  constructor() {\n    super(true, 8);\n  }\n}\nexport class Int16 extends Int {\n  constructor() {\n    super(true, 16);\n  }\n}\nexport class Int32 extends Int {\n  constructor() {\n    super(true, 32);\n  }\n}\nexport class Int64 extends Int {\n  constructor() {\n    super(true, 64);\n  }\n}\nexport class Uint8 extends Int {\n  constructor() {\n    super(false, 8);\n  }\n}\nexport class Uint16 extends Int {\n  constructor() {\n    super(false, 16);\n  }\n}\nexport class Uint32 extends Int {\n  constructor() {\n    super(false, 32);\n  }\n}\nexport class Uint64 extends Int {\n  constructor() {\n    super(false, 64);\n  }\n}\n\n// FLOATS\n\nconst Precision = {\n  HALF: 16,\n  SINGLE: 32,\n  DOUBLE: 64\n};\n\nexport class Float extends DataType {\n  readonly precision: number;\n  constructor(precision) {\n    super();\n    this.precision = precision;\n  }\n  get typeId(): Type {\n    return Type.Float;\n  }\n  // get ArrayType() {\n  //   switch (this.precision) {\n  //     case Precision.HALF:\n  //       return Uint16Array;\n  //     case Precision.SINGLE:\n  //       return Float32Array;\n  //     case Precision.DOUBLE:\n  //       return Float64Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Float';\n  }\n  toString(): string {\n    return `Float${this.precision}`;\n  }\n}\n\nexport class Float16 extends Float {\n  constructor() {\n    super(Precision.HALF);\n  }\n}\nexport class Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n}\nexport class Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n}\n\nexport class Binary extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Binary;\n  }\n  toString() {\n    return 'Binary';\n  }\n  get [Symbol.toStringTag]() {\n    return 'Binary';\n  }\n}\n\n// STRINGS\n\nexport class Utf8 extends DataType {\n  get typeId(): Type {\n    return Type.Utf8;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Utf8';\n  }\n  toString(): string {\n    return 'Utf8';\n  }\n}\n\n// DATES, TIMES AND INTERVALS\n\nconst DateUnit = {\n  DAY: 0,\n  MILLISECOND: 1\n};\n\nexport class Date extends DataType {\n  readonly unit: number;\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Date;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Date';\n  }\n  toString(): string {\n    return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`;\n  }\n}\n\nexport class DateDay extends Date {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n}\nexport class DateMillisecond extends Date {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n}\n\nconst TimeUnit = {\n  SECOND: 1,\n  MILLISECOND: 1e3,\n  MICROSECOND: 1e6,\n  NANOSECOND: 1e9\n};\n\nexport class Time extends DataType {\n  readonly unit: any;\n  readonly bitWidth: number;\n\n  constructor(unit: any, bitWidth: number) {\n    super();\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Time;\n  }\n  toString(): string {\n    return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Time';\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n}\n\nexport class TimeSecond extends Time {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n}\nexport class TimeMillisecond extends Time {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n}\n// export class TimeMicrosecond extends Time { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n// export class TimeNanosecond extends Time { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\nexport class Timestamp extends DataType {\n  readonly unit: any;\n  readonly timezone: any;\n\n  constructor(unit: any, timezone = null) {\n    super();\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n  get typeId(): Type {\n    return Type.Timestamp;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Timestamp';\n  }\n  toString(): string {\n    return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ''}>`;\n  }\n}\n\nexport class TimestampSecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.SECOND, timezone);\n  }\n}\nexport class TimestampMillisecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n}\nexport class TimestampMicrosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n}\nexport class TimestampNanosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n}\n\nconst IntervalUnit = {\n  DAY_TIME: 0,\n  YEAR_MONTH: 1\n};\n\nexport class Interval extends DataType {\n  readonly unit: number;\n  constructor(unit: number) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Interval;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Interval';\n  }\n  toString(): string {\n    return `Interval<${IntervalUnit[this.unit]}>`;\n  }\n}\n\nexport class IntervalDayTime extends Interval {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n}\nexport class IntervalYearMonth extends Interval {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n}\n\nexport class FixedSizeList extends DataType {\n  readonly listSize: number;\n  readonly children: Field[];\n\n  constructor(listSize: number, child: Field) {\n    super();\n    this.listSize = listSize;\n    this.children = [child];\n  }\n  get typeId(): Type {\n    return Type.FixedSizeList;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  // get ArrayType() {\n  //   return this.valueType.ArrayType;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'FixedSizeList';\n  }\n  toString(): string {\n    return `FixedSizeList[${this.listSize}]<${this.valueType}>`;\n  }\n}\n\nexport class Struct extends DataType {\n  public readonly children: Field[];\n\n  constructor(children: Field[]) {\n    super();\n    this.children = children;\n  }\n\n  public get typeId() {\n    return Type.Struct;\n  }\n  public toString() {\n    return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(', ')}}>`;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Struct';\n  }\n}\n","import {MeshAttribute, MeshAttributes} from './mesh-types';\nimport {Schema, Field, FixedSizeList} from '../../lib/schema/schema';\nimport {getArrowTypeFromTypedArray} from '../../lib/arrow/arrow-like-type-utils';\n\n/**\n * Create a schema for mesh attributes data\n * @param attributes\n * @param metadata\n * @returns\n */\nexport function deduceMeshSchema(\n  attributes: MeshAttributes,\n  metadata?: Map<string, string>\n): Schema {\n  const fields = deduceMeshFields(attributes);\n  return new Schema(fields, metadata);\n}\n\n/**\n * Create arrow-like schema field for mesh attribute\n * @param attributeName\n * @param attribute\n * @param optionalMetadata\n * @returns\n */\nexport function deduceMeshField(\n  attributeName: string,\n  attribute: MeshAttribute,\n  optionalMetadata?: Map<string, string>\n): Field {\n  const type = getArrowTypeFromTypedArray(attribute.value);\n  const metadata = optionalMetadata ? optionalMetadata : makeMeshAttributeMetadata(attribute);\n  const field = new Field(\n    attributeName,\n    new FixedSizeList(attribute.size, new Field('value', type)),\n    false,\n    metadata\n  );\n  return field;\n}\n\n/**\n * Create fields array for mesh attributes\n * @param attributes\n * @returns\n */\nfunction deduceMeshFields(attributes: MeshAttributes): Field[] {\n  const fields: Field[] = [];\n  for (const attributeName in attributes) {\n    const attribute: MeshAttribute = attributes[attributeName];\n    fields.push(deduceMeshField(attributeName, attribute));\n  }\n  return fields;\n}\n\n/**\n * Make metadata by mesh attribute properties\n * @param attribute\n * @returns\n */\nexport function makeMeshAttributeMetadata(attribute: MeshAttribute): Map<string, string> {\n  const result = new Map();\n  if ('byteOffset' in attribute) {\n    result.set('byteOffset', attribute.byteOffset!.toString(10));\n  }\n  if ('byteStride' in attribute) {\n    result.set('byteStride', attribute.byteStride!.toString(10));\n  }\n  if ('normalized' in attribute) {\n    result.set('normalized', attribute.normalized!.toString());\n  }\n  return result;\n}\n","import type {TypedArray} from '../../types';\nimport {\n  DataType,\n  Float32,\n  Float64,\n  Int16,\n  Int32,\n  Int8,\n  Uint16,\n  Uint32,\n  Uint8\n} from '../schema/schema';\n\nexport function getArrowTypeFromTypedArray(array: TypedArray): DataType {\n  switch (array.constructor) {\n    case Int8Array:\n      return new Int8();\n    case Uint8Array:\n      return new Uint8();\n    case Int16Array:\n      return new Int16();\n    case Uint16Array:\n      return new Uint16();\n    case Int32Array:\n      return new Int32();\n    case Uint32Array:\n      return new Uint32();\n    case Float32Array:\n      return new Float32();\n    case Float64Array:\n      return new Float64();\n    default:\n      throw new Error('array type not supported');\n  }\n}\n","import {deduceMeshField, MeshAttribute} from '@loaders.gl/schema';\nimport {Schema, Field} from '@loaders.gl/schema';\nimport type {DracoAttribute, DracoLoaderData, DracoMetadataEntry} from '../draco-types';\n\n/** Extract an arrow-like schema from a Draco mesh */\nexport function getDracoSchema(\n  attributes: {[attributeName: string]: MeshAttribute},\n  loaderData: DracoLoaderData,\n  indices?: MeshAttribute\n): Schema {\n  const metadataMap = makeMetadata(loaderData.metadata);\n  const fields: Field[] = [];\n  const namedLoaderDataAttributes = transformAttributesLoaderData(loaderData.attributes);\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    const field = getArrowFieldFromAttribute(\n      attributeName,\n      attribute,\n      namedLoaderDataAttributes[attributeName]\n    );\n    fields.push(field);\n  }\n  if (indices) {\n    const indicesField = getArrowFieldFromAttribute('indices', indices);\n    fields.push(indicesField);\n  }\n  return new Schema(fields, metadataMap);\n}\n\nfunction transformAttributesLoaderData(loaderData: {[key: number]: DracoAttribute}): {\n  [attributeName: string]: DracoAttribute;\n} {\n  const result: {[attributeName: string]: DracoAttribute} = {};\n  for (const key in loaderData) {\n    const dracoAttribute = loaderData[key];\n    result[dracoAttribute.name || 'undefined'] = dracoAttribute;\n  }\n  return result;\n}\n\nfunction getArrowFieldFromAttribute(\n  attributeName: string,\n  attribute: MeshAttribute,\n  loaderData?: DracoAttribute\n): Field {\n  const metadataMap = loaderData ? makeMetadata(loaderData.metadata) : undefined;\n  const field = deduceMeshField(attributeName, attribute, metadataMap);\n  return field;\n}\n\nfunction makeMetadata(metadata: {[key: string]: DracoMetadataEntry}): Map<string, string> {\n  const metadataMap = new Map();\n  for (const key in metadata) {\n    metadataMap.set(`${key}.string`, JSON.stringify(metadata[key]));\n  }\n  return metadataMap;\n}\n","/* eslint-disable camelcase */\n\nimport type {TypedArray, MeshAttribute, MeshGeometry} from '@loaders.gl/schema';\n\n// Draco types (input)\nimport type {\n  Draco3D,\n  Decoder,\n  Mesh,\n  PointCloud,\n  PointAttribute,\n  Metadata,\n  MetadataQuerier,\n  DracoInt32Array,\n  draco_DataType\n} from '../draco3d/draco3d-types';\n\n// Parsed data types (output)\nimport type {\n  DracoMesh,\n  DracoLoaderData,\n  DracoAttribute,\n  DracoMetadataEntry,\n  DracoQuantizationTransform,\n  DracoOctahedronTransform\n} from './draco-types';\n\nimport {getMeshBoundingBox} from '@loaders.gl/schema';\nimport {getDracoSchema} from './utils/get-draco-schema';\n\n/**\n * @param topology - How triangle indices should be generated (mesh only)\n * @param attributeNameEntry\n * @param extraAttributes\n * @param quantizedAttributes\n * @param octahedronAttributes\n */\nexport type DracoParseOptions = {\n  topology?: 'triangle-list' | 'triangle-strip';\n  attributeNameEntry?: string;\n  extraAttributes?: {[uniqueId: string]: number};\n  quantizedAttributes?: ('POSITION' | 'NORMAL' | 'COLOR' | 'TEX_COORD' | 'GENERIC')[];\n  octahedronAttributes?: ('POSITION' | 'NORMAL' | 'COLOR' | 'TEX_COORD' | 'GENERIC')[];\n};\n\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst GEOMETRY_TYPE = {\n  TRIANGULAR_MESH: 0,\n  POINT_CLOUD: 1\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR: 'COLOR_0',\n  TEX_COORD: 'TEXCOORD_0'\n};\n\nconst DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP = {\n  1: Int8Array,\n  2: Uint8Array,\n  3: Int16Array,\n  4: Uint16Array,\n  5: Int32Array,\n  6: Uint32Array,\n  9: Float32Array\n};\n\nconst INDEX_ITEM_SIZE = 4;\n\nexport default class DracoParser {\n  draco: Draco3D;\n  decoder: Decoder;\n  metadataQuerier: MetadataQuerier;\n\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco: Draco3D) {\n    this.draco = draco;\n    this.decoder = new this.draco.Decoder();\n    this.metadataQuerier = new this.draco.MetadataQuerier();\n  }\n\n  /**\n   * Destroy draco resources\n   */\n  destroy(): void {\n    this.draco.destroy(this.decoder);\n    this.draco.destroy(this.metadataQuerier);\n  }\n\n  /**\n   * NOTE: caller must call `destroyGeometry` on the return value after using it\n   * @param arrayBuffer\n   * @param options\n   */\n  parseSync(arrayBuffer: ArrayBuffer, options: DracoParseOptions = {}): DracoMesh {\n    const buffer = new this.draco.DecoderBuffer();\n    buffer.Init(new Int8Array(arrayBuffer), arrayBuffer.byteLength);\n\n    this._disableAttributeTransforms(options);\n\n    const geometry_type = this.decoder.GetEncodedGeometryType(buffer);\n    const dracoGeometry =\n      geometry_type === this.draco.TRIANGULAR_MESH\n        ? new this.draco.Mesh()\n        : new this.draco.PointCloud();\n\n    try {\n      let dracoStatus;\n      switch (geometry_type) {\n        case this.draco.TRIANGULAR_MESH:\n          dracoStatus = this.decoder.DecodeBufferToMesh(buffer, dracoGeometry as Mesh);\n          break;\n\n        case this.draco.POINT_CLOUD:\n          dracoStatus = this.decoder.DecodeBufferToPointCloud(buffer, dracoGeometry);\n          break;\n\n        default:\n          throw new Error('DRACO: Unknown geometry type.');\n      }\n\n      if (!dracoStatus.ok() || !dracoGeometry.ptr) {\n        const message = `DRACO decompression failed: ${dracoStatus.error_msg()}`;\n        // console.error(message);\n        throw new Error(message);\n      }\n\n      const loaderData = this._getDracoLoaderData(dracoGeometry, geometry_type, options);\n\n      const geometry = this._getMeshData(dracoGeometry, loaderData, options);\n\n      const boundingBox = getMeshBoundingBox(geometry.attributes);\n\n      const schema = getDracoSchema(geometry.attributes, loaderData, geometry.indices);\n\n      const data: DracoMesh = {\n        loader: 'draco',\n        loaderData,\n        header: {\n          vertexCount: dracoGeometry.num_points(),\n          boundingBox\n        },\n        ...geometry,\n        schema\n      };\n      return data;\n    } finally {\n      this.draco.destroy(buffer);\n      if (dracoGeometry) {\n        this.draco.destroy(dracoGeometry);\n      }\n    }\n  }\n\n  // Draco specific \"loader data\"\n\n  /**\n   * Extract\n   * @param dracoGeometry\n   * @param geometry_type\n   * @param options\n   * @returns\n   */\n  _getDracoLoaderData(\n    dracoGeometry: Mesh | PointCloud,\n    geometry_type,\n    options: DracoParseOptions\n  ): DracoLoaderData {\n    const metadata = this._getTopLevelMetadata(dracoGeometry);\n    const attributes = this._getDracoAttributes(dracoGeometry, options);\n\n    return {\n      geometry_type,\n      num_attributes: dracoGeometry.num_attributes(),\n      num_points: dracoGeometry.num_points(),\n      num_faces: dracoGeometry instanceof this.draco.Mesh ? dracoGeometry.num_faces() : 0,\n      metadata,\n      attributes\n    };\n  }\n\n  /**\n   * Extract all draco provided information and metadata for each attribute\n   * @param dracoGeometry\n   * @param options\n   * @returns\n   */\n  _getDracoAttributes(\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[unique_id: number]: DracoAttribute} {\n    const dracoAttributes: {[unique_id: number]: DracoAttribute} = {};\n\n    for (let attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {\n      // Note: Draco docs do not seem clear on `GetAttribute` ids just being a zero-based index,\n      // but it does seems to work this way\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);\n\n      const metadata = this._getAttributeMetadata(dracoGeometry, attributeId);\n\n      dracoAttributes[dracoAttribute.unique_id()] = {\n        unique_id: dracoAttribute.unique_id(),\n        attribute_type: dracoAttribute.attribute_type(),\n        data_type: dracoAttribute.data_type(),\n        num_components: dracoAttribute.num_components(),\n\n        byte_offset: dracoAttribute.byte_offset(),\n        byte_stride: dracoAttribute.byte_stride(),\n        normalized: dracoAttribute.normalized(),\n        attribute_index: attributeId,\n\n        metadata\n      };\n\n      // Add transformation parameters for any attributes app wants untransformed\n      const quantization = this._getQuantizationTransform(dracoAttribute, options);\n      if (quantization) {\n        dracoAttributes[dracoAttribute.unique_id()].quantization_transform = quantization;\n      }\n\n      const octahedron = this._getOctahedronTransform(dracoAttribute, options);\n      if (octahedron) {\n        dracoAttributes[dracoAttribute.unique_id()].octahedron_transform = octahedron;\n      }\n    }\n\n    return dracoAttributes;\n  }\n\n  /**\n   * Get standard loaders.gl mesh category data\n   * Extracts the geometry from draco\n   * @param dracoGeometry\n   * @param options\n   */\n  _getMeshData(\n    dracoGeometry: Mesh | PointCloud,\n    loaderData: DracoLoaderData,\n    options: DracoParseOptions\n  ): MeshGeometry {\n    const attributes = this._getMeshAttributes(loaderData, dracoGeometry, options);\n\n    const positionAttribute = attributes.POSITION;\n    if (!positionAttribute) {\n      throw new Error('DRACO: No position attribute found.');\n    }\n\n    // For meshes, we need indices to define the faces.\n    if (dracoGeometry instanceof this.draco.Mesh) {\n      switch (options.topology) {\n        case 'triangle-strip':\n          return {\n            topology: 'triangle-strip',\n            mode: 4, // GL.TRIANGLES\n            attributes,\n            indices: {\n              value: this._getTriangleStripIndices(dracoGeometry),\n              size: 1\n            }\n          };\n        case 'triangle-list':\n        default:\n          return {\n            topology: 'triangle-list',\n            mode: 5, // GL.TRIANGLE_STRIP\n            attributes,\n            indices: {\n              value: this._getTriangleListIndices(dracoGeometry),\n              size: 1\n            }\n          };\n      }\n    }\n\n    // PointCloud - must come last as Mesh inherits from PointCloud\n    return {\n      topology: 'point-list',\n      mode: 0, // GL.POINTS\n      attributes\n    };\n  }\n\n  _getMeshAttributes(\n    loaderData: DracoLoaderData,\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[attributeName: string]: MeshAttribute} {\n    const attributes: {[key: string]: MeshAttribute} = {};\n\n    for (const loaderAttribute of Object.values(loaderData.attributes)) {\n      const attributeName = this._deduceAttributeName(loaderAttribute, options);\n      loaderAttribute.name = attributeName;\n      const {value, size} = this._getAttributeValues(dracoGeometry, loaderAttribute);\n      attributes[attributeName] = {\n        value,\n        size,\n        byteOffset: loaderAttribute.byte_offset,\n        byteStride: loaderAttribute.byte_stride,\n        normalized: loaderAttribute.normalized\n      };\n    }\n\n    return attributes;\n  }\n\n  // MESH INDICES EXTRACTION\n\n  /**\n   * For meshes, we need indices to define the faces.\n   * @param dracoGeometry\n   */\n  _getTriangleListIndices(dracoGeometry: Mesh) {\n    // Example on how to retrieve mesh and attributes.\n    const numFaces = dracoGeometry.num_faces();\n    const numIndices = numFaces * 3;\n    const byteLength = numIndices * INDEX_ITEM_SIZE;\n\n    const ptr = this.draco._malloc(byteLength);\n    try {\n      this.decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n      return new Uint32Array(this.draco.HEAPF32.buffer, ptr, numIndices).slice();\n    } finally {\n      this.draco._free(ptr);\n    }\n  }\n\n  /**\n   * For meshes, we need indices to define the faces.\n   * @param dracoGeometry\n   */\n  _getTriangleStripIndices(dracoGeometry: Mesh) {\n    const dracoArray = new this.draco.DracoInt32Array();\n    try {\n      /* const numStrips = */ this.decoder.GetTriangleStripsFromMesh(dracoGeometry, dracoArray);\n      return getUint32Array(dracoArray);\n    } finally {\n      this.draco.destroy(dracoArray);\n    }\n  }\n\n  /**\n   *\n   * @param dracoGeometry\n   * @param dracoAttribute\n   * @param attributeName\n   */\n  _getAttributeValues(\n    dracoGeometry: Mesh | PointCloud,\n    attribute: DracoAttribute\n  ): {value: TypedArray; size: number} {\n    const TypedArrayCtor = DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP[attribute.data_type];\n    const numComponents = attribute.num_components;\n    const numPoints = dracoGeometry.num_points();\n    const numValues = numPoints * numComponents;\n\n    const byteLength = numValues * TypedArrayCtor.BYTES_PER_ELEMENT;\n    const dataType = getDracoDataType(this.draco, TypedArrayCtor);\n\n    let value: TypedArray;\n\n    const ptr = this.draco._malloc(byteLength);\n    try {\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attribute.attribute_index);\n      this.decoder.GetAttributeDataArrayForAllPoints(\n        dracoGeometry,\n        dracoAttribute,\n        dataType,\n        byteLength,\n        ptr\n      );\n      value = new TypedArrayCtor(this.draco.HEAPF32.buffer, ptr, numValues).slice();\n    } finally {\n      this.draco._free(ptr);\n    }\n\n    return {value, size: numComponents};\n  }\n\n  // Attribute names\n\n  /** \n   * DRACO does not store attribute names - We need to deduce an attribute name\n   * for each attribute\n  _getAttributeNames(\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[unique_id: number]: string} {\n    const attributeNames: {[unique_id: number]: string} = {};\n    for (let attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);\n      const attributeName = this._deduceAttributeName(dracoAttribute, options);\n      attributeNames[attributeName] = attributeName;\n    }\n    return attributeNames;\n  }\n   */\n\n  /**\n   * Deduce an attribute name.\n   * @note DRACO does not save attribute names, just general type (POSITION, COLOR)\n   * to help optimize compression. We generate GLTF compatible names for the Draco-recognized\n   * types\n   * @param attributeData\n   */\n  _deduceAttributeName(attribute: DracoAttribute, options: DracoParseOptions): string {\n    // Deduce name based on application provided map\n    const uniqueId = attribute.unique_id;\n    for (const [attributeName, attributeUniqueId] of Object.entries(\n      options.extraAttributes || {}\n    )) {\n      if (attributeUniqueId === uniqueId) {\n        return attributeName;\n      }\n    }\n\n    // Deduce name based on attribute type\n    const thisAttributeType = attribute.attribute_type;\n    for (const dracoAttributeConstant in DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP) {\n      const attributeType = this.draco[dracoAttributeConstant];\n      if (attributeType === thisAttributeType) {\n        // TODO - Return unique names if there multiple attributes per type\n        // (e.g. multiple TEX_COORDS or COLORS)\n        return DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP[dracoAttributeConstant];\n      }\n    }\n\n    // Look up in metadata\n    // TODO - shouldn't this have priority?\n    const entryName = options.attributeNameEntry || 'name';\n    if (attribute.metadata[entryName]) {\n      return attribute.metadata[entryName].string;\n    }\n\n    // Attribute of \"GENERIC\" type, we need to assign some name\n    return `CUSTOM_ATTRIBUTE_${uniqueId}`;\n  }\n\n  // METADATA EXTRACTION\n\n  /** Get top level metadata */\n  _getTopLevelMetadata(dracoGeometry: Mesh | PointCloud) {\n    const dracoMetadata = this.decoder.GetMetadata(dracoGeometry);\n    return this._getDracoMetadata(dracoMetadata);\n  }\n\n  /** Get per attribute metadata */\n  _getAttributeMetadata(dracoGeometry: Mesh | PointCloud, attributeId: number) {\n    const dracoMetadata = this.decoder.GetAttributeMetadata(dracoGeometry, attributeId);\n    return this._getDracoMetadata(dracoMetadata);\n  }\n\n  /**\n   * Extract metadata field values\n   * @param dracoMetadata\n   * @returns\n   */\n  _getDracoMetadata(dracoMetadata: Metadata): {[entry: string]: DracoMetadataEntry} {\n    // The not so wonderful world of undocumented Draco APIs :(\n    if (!dracoMetadata || !dracoMetadata.ptr) {\n      return {};\n    }\n    const result = {};\n    const numEntries = this.metadataQuerier.NumEntries(dracoMetadata);\n    for (let entryIndex = 0; entryIndex < numEntries; entryIndex++) {\n      const entryName = this.metadataQuerier.GetEntryName(dracoMetadata, entryIndex);\n      result[entryName] = this._getDracoMetadataField(dracoMetadata, entryName);\n    }\n    return result;\n  }\n\n  /**\n   * Extracts possible values for one metadata entry by name\n   * @param dracoMetadata\n   * @param entryName\n   */\n  _getDracoMetadataField(dracoMetadata: Metadata, entryName: string): DracoMetadataEntry {\n    const dracoArray = new this.draco.DracoInt32Array();\n    try {\n      // Draco metadata fields can hold int32 arrays\n      this.metadataQuerier.GetIntEntryArray(dracoMetadata, entryName, dracoArray);\n      const intArray = getInt32Array(dracoArray);\n      return {\n        int: this.metadataQuerier.GetIntEntry(dracoMetadata, entryName),\n        string: this.metadataQuerier.GetStringEntry(dracoMetadata, entryName),\n        double: this.metadataQuerier.GetDoubleEntry(dracoMetadata, entryName),\n        intArray\n      };\n    } finally {\n      this.draco.destroy(dracoArray);\n    }\n  }\n\n  // QUANTIZED ATTRIBUTE SUPPORT (NO DECOMPRESSION)\n\n  /** Skip transforms for specific attribute types */\n  _disableAttributeTransforms(options: DracoParseOptions) {\n    const {quantizedAttributes = [], octahedronAttributes = []} = options;\n    const skipAttributes = [...quantizedAttributes, ...octahedronAttributes];\n    for (const dracoAttributeName of skipAttributes) {\n      this.decoder.SkipAttributeTransform(this.draco[dracoAttributeName]);\n    }\n  }\n\n  /**\n   * Extract (and apply?) Position Transform\n   * @todo not used\n   */\n  _getQuantizationTransform(\n    dracoAttribute: PointAttribute,\n    options: DracoParseOptions\n  ): DracoQuantizationTransform | null {\n    const {quantizedAttributes = []} = options;\n    const attribute_type = dracoAttribute.attribute_type();\n    const skip = quantizedAttributes.map((type) => this.decoder[type]).includes(attribute_type);\n    if (skip) {\n      const transform = new this.draco.AttributeQuantizationTransform();\n      try {\n        if (transform.InitFromAttribute(dracoAttribute)) {\n          return {\n            quantization_bits: transform.quantization_bits(),\n            range: transform.range(),\n            min_values: new Float32Array([1, 2, 3]).map((i) => transform.min_value(i))\n          };\n        }\n      } finally {\n        this.draco.destroy(transform);\n      }\n    }\n    return null;\n  }\n\n  _getOctahedronTransform(\n    dracoAttribute: PointAttribute,\n    options: DracoParseOptions\n  ): DracoOctahedronTransform | null {\n    const {octahedronAttributes = []} = options;\n    const attribute_type = dracoAttribute.attribute_type();\n    const octahedron = octahedronAttributes\n      .map((type) => this.decoder[type])\n      .includes(attribute_type);\n    if (octahedron) {\n      const transform = new this.draco.AttributeQuantizationTransform();\n      try {\n        if (transform.InitFromAttribute(dracoAttribute)) {\n          return {\n            quantization_bits: transform.quantization_bits()\n          };\n        }\n      } finally {\n        this.draco.destroy(transform);\n      }\n    }\n    return null;\n  }\n\n  // HELPERS\n}\n\n/**\n * Get draco specific data type by TypedArray constructor type\n * @param attributeType\n * @returns draco specific data type\n */\nfunction getDracoDataType(draco: Draco3D, attributeType: any): draco_DataType {\n  switch (attributeType) {\n    case Float32Array:\n      return draco.DT_FLOAT32;\n    case Int8Array:\n      return draco.DT_INT8;\n    case Int16Array:\n      return draco.DT_INT16;\n    case Int32Array:\n      return draco.DT_INT32;\n    case Uint8Array:\n      return draco.DT_UINT8;\n    case Uint16Array:\n      return draco.DT_UINT16;\n    case Uint32Array:\n      return draco.DT_UINT32;\n    default:\n      return draco.DT_INVALID;\n  }\n}\n\n/**\n * Copy a Draco int32 array into a JS typed array\n */\nfunction getInt32Array(dracoArray: DracoInt32Array): Int32Array {\n  const numValues = dracoArray.size();\n  const intArray = new Int32Array(numValues);\n  for (let i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n  return intArray;\n}\n\n/**\n * Copy a Draco int32 array into a JS typed array\n */\nfunction getUint32Array(dracoArray: DracoInt32Array): Int32Array {\n  const numValues = dracoArray.size();\n  const intArray = new Int32Array(numValues);\n  for (let i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n  return intArray;\n}\n","// Mesh category utilities\n// TODO - move to mesh category module, or to math.gl/geometry module\nimport {TypedArray} from '../../types';\nimport {MeshAttributes} from './mesh-types';\n\ntype TypedArrays = {[key: string]: TypedArray};\n\n/**\n * Holds an axis aligned bounding box\n * TODO - make sure AxisAlignedBoundingBox in math.gl/culling understands this format (or change this format)\n */\ntype BoundingBox = [[number, number, number], [number, number, number]];\n\n/**\n * Get number of vertices in mesh\n * @param attributes\n */\nexport function getMeshSize(attributes: TypedArrays): number {\n  let size = 0;\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    if (ArrayBuffer.isView(attribute)) {\n      // @ts-ignore DataView doesn't have BYTES_PER_ELEMENT\n      size += attribute.byteLength * attribute.BYTES_PER_ELEMENT;\n    }\n  }\n  return size;\n}\n\n/**\n * Get the (axis aligned) bounding box of a mesh\n * @param attributes\n * @returns array of two vectors representing the axis aligned bounding box\n */\n// eslint-disable-next-line complexity\nexport function getMeshBoundingBox(attributes: MeshAttributes): BoundingBox {\n  let minX = Infinity;\n  let minY = Infinity;\n  let minZ = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let maxZ = -Infinity;\n\n  const positions = attributes.POSITION ? attributes.POSITION.value : [];\n  const len = positions && positions.length;\n\n  for (let i = 0; i < len; i += 3) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const z = positions[i + 2];\n\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    minZ = z < minZ ? z : minZ;\n\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    maxZ = z > maxZ ? z : maxZ;\n  }\n  return [\n    [minX, minY, minZ],\n    [maxX, maxY, maxZ]\n  ];\n}\n","/* global importScripts */\nimport {global, isBrowser, isWorker} from '../env-utils/globals';\nimport * as node from '../node/require-utils.node';\nimport {assert} from '../env-utils/assert';\nimport {VERSION as __VERSION__} from '../env-utils/version';\n\n// TODO - unpkg.com doesn't seem to have a `latest` specifier for alpha releases...\nconst LATEST = 'latest';\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : LATEST;\n\nconst loadLibraryPromises: Record<string, Promise<any>> = {}; // promises\n\n/**\n * Dynamically loads a library (\"module\")\n *\n * - wasm library: Array buffer is returned\n * - js library: Parse JS is returned\n *\n * Method depends on environment\n * - browser - script element is created and installed on document\n * - worker - eval is called on global context\n * - node - file is required\n *\n * @param libraryUrl\n * @param moduleName\n * @param options\n */\nexport async function loadLibrary(\n  libraryUrl: string,\n  moduleName: string | null = null,\n  options: object = {}\n): Promise<any> {\n  if (moduleName) {\n    libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n  }\n\n  // Ensure libraries are only loaded once\n\n  loadLibraryPromises[libraryUrl] =\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n  return await loadLibraryPromises[libraryUrl];\n}\n\n// TODO - sort out how to resolve paths for main/worker and dev/prod\nexport function getLibraryUrl(library: string, moduleName?: string, options?: any): string {\n  // Check if already a URL\n  if (library.startsWith('http')) {\n    return library;\n  }\n\n  // Allow application to import and supply libraries through `options.modules`\n  const modules = options.modules || {};\n  if (modules[library]) {\n    return modules[library];\n  }\n\n  // Load from local files, not from CDN scripts in Node.js\n  // TODO - needs to locate the modules directory when installed!\n  if (!isBrowser) {\n    return `modules/${moduleName}/dist/libs/${library}`;\n  }\n\n  // In browser, load from external scripts\n  if (options.CDN) {\n    assert(options.CDN.startsWith('http'));\n    return `${options.CDN}/${moduleName}@${VERSION}/dist/libs/${library}`;\n  }\n\n  // TODO - loading inside workers requires paths relative to worker script location...\n  if (isWorker) {\n    return `../src/libs/${library}`;\n  }\n\n  return `modules/${moduleName}/src/libs/${library}`;\n}\n\nasync function loadLibraryFromFile(libraryUrl: string): Promise<any> {\n  if (libraryUrl.endsWith('wasm')) {\n    const response = await fetch(libraryUrl);\n    return await response.arrayBuffer();\n  }\n\n  if (!isBrowser) {\n    try {\n      return node && node.requireFromFile && (await node.requireFromFile(libraryUrl));\n    } catch {\n      return null;\n    }\n  }\n  if (isWorker) {\n    return importScripts(libraryUrl);\n  }\n  // TODO - fix - should be more secure than string parsing since observes CORS\n  // if (isBrowser) {\n  //   return await loadScriptFromFile(libraryUrl);\n  // }\n\n  const response = await fetch(libraryUrl);\n  const scriptSource = await response.text();\n  return loadLibraryFromString(scriptSource, libraryUrl);\n}\n\n/*\nasync function loadScriptFromFile(libraryUrl) {\n  const script = document.createElement('script');\n  script.src = libraryUrl;\n  return await new Promise((resolve, reject) => {\n    script.onload = data => {\n      resolve(data);\n    };\n    script.onerror = reject;\n  });\n}\n*/\n\n// TODO - Needs security audit...\n//  - Raw eval call\n//  - Potentially bypasses CORS\n// Upside is that this separates fetching and parsing\n// we could create a`LibraryLoader` or`ModuleLoader`\nfunction loadLibraryFromString(scriptSource: string, id: string): null | any {\n  if (!isBrowser) {\n    return node.requireFromString && node.requireFromString(scriptSource, id);\n  }\n\n  if (isWorker) {\n    // Use lvalue trick to make eval run in global scope\n    eval.call(global, scriptSource); // eslint-disable-line no-eval\n    // https://stackoverflow.com/questions/9107240/1-evalthis-vs-evalthis-in-javascript\n    // http://perfectionkills.com/global-eval-what-are-the-options/\n    return null;\n  }\n\n  const script = document.createElement('script');\n  script.id = id;\n  // most browsers like a separate text node but some throw an error. The second method covers those.\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n  document.body.appendChild(script);\n  return null;\n}\n\n// TODO - technique for module injection into worker, from THREE.DracoLoader...\n/*\nfunction combineWorkerWithLibrary(worker, jsContent) {\n  var fn = wWorker.toString();\n  var body = [\n    '// injected',\n    jsContent,\n    '',\n    '// worker',\n    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n  ].join('\\n');\n  this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n}\n*/\n","// Replacement for the external assert method to reduce bundle size\n// Note: We don't use the second \"message\" argument in calling code,\n// so no need to support it here\n\n/** Throws an `Error` with the optional `message` if `condition` is falsy */\nexport function assert(condition: any, message?: string): void {\n  if (!condition) {\n    throw new Error(message || 'loaders.gl assertion failed.');\n  }\n}\n","// Dynamic DRACO module loading inspired by THREE.DRACOLoader\n// https://github.com/mrdoob/three.js/blob/398c4f39ebdb8b23eefd4a7a5ec49ec0c96c7462/examples/jsm/loaders/DRACOLoader.js\n// by Don McCurdy / https://www.donmccurdy.com / MIT license\n\nimport {loadLibrary} from '@loaders.gl/worker-utils';\n\nconst DRACO_VERSION = '1.4.1';\nconst DRACO_JS_DECODER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_decoder.js`;\nconst DRACO_WASM_WRAPPER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_wasm_wrapper.js`;\nconst DRACO_WASM_DECODER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_decoder.wasm`;\n\nconst DRACO_ENCODER_URL = `https://raw.githubusercontent.com/google/draco/${DRACO_VERSION}/javascript/draco_encoder.js`;\n\nlet loadDecoderPromise;\nlet loadEncoderPromise;\n\nexport async function loadDracoDecoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadDecoderPromise =\n      loadDecoderPromise ||\n      modules.draco3d.createDecoderModule({}).then((draco) => {\n        return {draco};\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadDecoderPromise = loadDecoderPromise || loadDracoDecoder(options);\n  }\n  return await loadDecoderPromise;\n}\n\nexport async function loadDracoEncoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadEncoderPromise =\n      loadEncoderPromise ||\n      modules.draco3d.createEncoderModule({}).then((draco) => {\n        return {draco};\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadEncoderPromise = loadEncoderPromise || loadDracoEncoder(options);\n  }\n  return await loadEncoderPromise;\n}\n\n// DRACO DECODER LOADING\n\nasync function loadDracoDecoder(options) {\n  let DracoDecoderModule;\n  let wasmBinary;\n  switch (options.draco && options.draco.decoderType) {\n    case 'js':\n      DracoDecoderModule = await loadLibrary(DRACO_JS_DECODER_URL, 'draco', options);\n      break;\n\n    case 'wasm':\n    default:\n      [DracoDecoderModule, wasmBinary] = await Promise.all([\n        await loadLibrary(DRACO_WASM_WRAPPER_URL, 'draco', options),\n        await loadLibrary(DRACO_WASM_DECODER_URL, 'draco', options)\n      ]);\n  }\n  // Depends on how import happened...\n  // @ts-ignore\n  DracoDecoderModule = DracoDecoderModule || globalThis.DracoDecoderModule;\n  return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);\n}\n\nfunction initializeDracoDecoder(DracoDecoderModule, wasmBinary) {\n  const options: {wasmBinary?: any} = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    DracoDecoderModule({\n      ...options,\n      onModuleLoaded: (draco) => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n\n// ENCODER\n\nasync function loadDracoEncoder(options) {\n  let DracoEncoderModule = await loadLibrary(DRACO_ENCODER_URL, 'draco', options);\n  // @ts-ignore\n  DracoEncoderModule = DracoEncoderModule || globalThis.DracoEncoderModule;\n\n  return new Promise((resolve) => {\n    DracoEncoderModule({\n      onModuleLoaded: (draco) => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n","/* eslint-disable camelcase */\n// This code is inspired by example code in the DRACO repository\nimport type {\n  Draco3D,\n  DracoInt8Array,\n  Encoder,\n  Mesh,\n  MeshBuilder,\n  PointCloud,\n  Metadata,\n  MetadataBuilder,\n  draco_GeometryAttribute_Type\n} from '../draco3d/draco3d-types';\n\nimport type {TypedArray} from '@loaders.gl/schema';\nimport type {DracoMesh} from './draco-types';\n\nexport type DracoBuildOptions = {\n  pointcloud?: boolean;\n  metadata?: {[key: string]: string};\n  attributesMetadata?: {};\n  log?: any;\n\n  // draco encoding options\n  speed?: [number, number];\n  method?: string;\n  quantization?: {[attributeName: string]: number};\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR_0: 'COLOR',\n  TEXCOORD_0: 'TEX_COORD'\n};\n\nconst noop = () => {};\n\nexport default class DracoBuilder {\n  draco: Draco3D;\n  dracoEncoder: Encoder;\n  dracoMeshBuilder: MeshBuilder;\n  dracoMetadataBuilder: MetadataBuilder;\n  log: any;\n\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco: Draco3D) {\n    this.draco = draco;\n    this.dracoEncoder = new this.draco.Encoder();\n    this.dracoMeshBuilder = new this.draco.MeshBuilder();\n    this.dracoMetadataBuilder = new this.draco.MetadataBuilder();\n  }\n\n  destroy(): void {\n    this.destroyEncodedObject(this.dracoMeshBuilder);\n    this.destroyEncodedObject(this.dracoEncoder);\n    this.destroyEncodedObject(this.dracoMetadataBuilder);\n    // @ts-ignore\n    this.dracoMeshBuilder = null;\n    // @ts-ignore\n    this.dracoEncoder = null;\n    // @ts-ignore\n    this.draco = null;\n  }\n\n  // TBD - when does this need to be called?\n  destroyEncodedObject(object): void {\n    if (object) {\n      this.draco.destroy(object);\n    }\n  }\n\n  /**\n   * Encode mesh or point cloud\n   * @param mesh =({})\n   * @param options\n   */\n  encodeSync(mesh: DracoMesh, options: DracoBuildOptions = {}): ArrayBuffer {\n    this.log = noop; // TODO\n    this._setOptions(options);\n\n    return options.pointcloud\n      ? this._encodePointCloud(mesh, options)\n      : this._encodeMesh(mesh, options);\n  }\n\n  // PRIVATE\n\n  _getAttributesFromMesh(mesh: DracoMesh) {\n    // TODO - Change the encodePointCloud interface instead?\n    const attributes = {...mesh, ...mesh.attributes};\n    // Fold indices into the attributes\n    if (mesh.indices) {\n      attributes.indices = mesh.indices;\n    }\n    return attributes;\n  }\n\n  _encodePointCloud(pointcloud: DracoMesh, options: DracoBuildOptions): ArrayBuffer {\n    const dracoPointCloud = new this.draco.PointCloud();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoPointCloud, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(pointcloud);\n\n    // Build a `DracoPointCloud` from the input data\n    this._createDracoPointCloud(dracoPointCloud, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodePointCloudToDracoBuffer(\n        dracoPointCloud,\n        false,\n        dracoData\n      );\n\n      if (!(encodedLen > 0)) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoPointCloud.num_points()} points\n        with ${dracoPointCloud.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoPointCloud);\n    }\n  }\n\n  _encodeMesh(mesh: DracoMesh, options: DracoBuildOptions): ArrayBuffer {\n    const dracoMesh = new this.draco.Mesh();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoMesh, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(mesh);\n\n    // Build a `DracoMesh` from the input data\n    this._createDracoMesh(dracoMesh, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodeMeshToDracoBuffer(dracoMesh, dracoData);\n      if (encodedLen <= 0) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoMesh.num_points()} points\n        with ${dracoMesh.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoMesh);\n    }\n  }\n\n  /**\n   * Set encoding options.\n   * @param {{speed?: any; method?: any; quantization?: any;}} options\n   */\n  _setOptions(options: DracoBuildOptions): void {\n    if ('speed' in options) {\n      // @ts-ignore\n      this.dracoEncoder.SetSpeedOptions(...options.speed);\n    }\n    if ('method' in options) {\n      const dracoMethod = this.draco[options.method || 'MESH_SEQUENTIAL_ENCODING'];\n      // assert(dracoMethod)\n      this.dracoEncoder.SetEncodingMethod(dracoMethod);\n    }\n    if ('quantization' in options) {\n      for (const attribute in options.quantization) {\n        const bits = options.quantization[attribute];\n        const dracoPosition = this.draco[attribute];\n        this.dracoEncoder.SetAttributeQuantization(dracoPosition, bits);\n      }\n    }\n  }\n\n  /**\n   * @param {Mesh} dracoMesh\n   * @param {object} attributes\n   * @returns {Mesh}\n   */\n  _createDracoMesh(dracoMesh: Mesh, attributes, options: DracoBuildOptions): Mesh {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount);\n\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoMesh, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoMesh);\n      throw error;\n    }\n\n    return dracoMesh;\n  }\n\n  /**\n   * @param {} dracoPointCloud\n   * @param {object} attributes\n   */\n  _createDracoPointCloud(\n    dracoPointCloud: PointCloud,\n    attributes: object,\n    options: DracoBuildOptions\n  ): PointCloud {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(\n          dracoPointCloud,\n          attributeName,\n          attribute,\n          vertexCount\n        );\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoPointCloud, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoPointCloud);\n      throw error;\n    }\n\n    return dracoPointCloud;\n  }\n\n  /**\n   * @param mesh\n   * @param attributeName\n   * @param attribute\n   * @param vertexCount\n   */\n  _addAttributeToMesh(\n    mesh: PointCloud,\n    attributeName: string,\n    attribute: TypedArray,\n    vertexCount: number\n  ) {\n    if (!ArrayBuffer.isView(attribute)) {\n      return -1;\n    }\n\n    const type = this._getDracoAttributeType(attributeName);\n    // @ts-ignore TODO/fix types\n    const size = attribute.length / vertexCount;\n\n    if (type === 'indices') {\n      // @ts-ignore TODO/fix types\n      const numFaces = attribute.length / 3;\n      this.log(`Adding attribute ${attributeName}, size ${numFaces}`);\n\n      // @ts-ignore assumes mesh is a Mesh, not a point cloud\n      this.dracoMeshBuilder.AddFacesToMesh(mesh, numFaces, attribute);\n      return -1;\n    }\n\n    this.log(`Adding attribute ${attributeName}, size ${size}`);\n\n    const builder = this.dracoMeshBuilder;\n    const {buffer} = attribute;\n\n    switch (attribute.constructor) {\n      case Int8Array:\n        return builder.AddInt8Attribute(mesh, type, vertexCount, size, new Int8Array(buffer));\n\n      case Int16Array:\n        return builder.AddInt16Attribute(mesh, type, vertexCount, size, new Int16Array(buffer));\n\n      case Int32Array:\n        return builder.AddInt32Attribute(mesh, type, vertexCount, size, new Int32Array(buffer));\n      case Uint8Array:\n      case Uint8ClampedArray:\n        return builder.AddUInt8Attribute(mesh, type, vertexCount, size, new Uint8Array(buffer));\n\n      case Uint16Array:\n        return builder.AddUInt16Attribute(mesh, type, vertexCount, size, new Uint16Array(buffer));\n\n      case Uint32Array:\n        return builder.AddUInt32Attribute(mesh, type, vertexCount, size, new Uint32Array(buffer));\n\n      case Float32Array:\n      default:\n        return builder.AddFloatAttribute(mesh, type, vertexCount, size, new Float32Array(buffer));\n    }\n  }\n\n  /**\n   * DRACO can compress attributes of know type better\n   * TODO - expose an attribute type map?\n   * @param attributeName\n   */\n  _getDracoAttributeType(attributeName: string): draco_GeometryAttribute_Type | 'indices' {\n    switch (attributeName.toLowerCase()) {\n      case 'indices':\n        return 'indices';\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return this.draco.POSITION;\n      case 'normal':\n      case 'normals':\n        return this.draco.NORMAL;\n      case 'color':\n      case 'colors':\n        return this.draco.COLOR;\n      case 'texcoord':\n      case 'texcoords':\n        return this.draco.TEX_COORD;\n      default:\n        return this.draco.GENERIC;\n    }\n  }\n\n  _getPositionAttribute(attributes) {\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const dracoType = this._getDracoAttributeType(attributeName);\n      if (dracoType === this.draco.POSITION) {\n        return attribute;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Add metadata for the geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param metadata\n   */\n  _addGeometryMetadata(dracoGeometry: PointCloud, metadata: {[key: string]: string}) {\n    const dracoMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoMetadata, metadata);\n    this.dracoMeshBuilder.AddMetadata(dracoGeometry, dracoMetadata);\n  }\n\n  /**\n   * Add metadata for an attribute to geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param uniqueAttributeId\n   * @param metadata\n   */\n  _addAttributeMetadata(\n    dracoGeometry: PointCloud,\n    uniqueAttributeId: number,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    // Note: Draco JS IDL doesn't seem to expose draco.AttributeMetadata, however it seems to\n    // create such objects automatically from draco.Metadata object.\n    const dracoAttributeMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoAttributeMetadata, metadata);\n    // Draco3d doc note: Directly add attribute metadata to geometry.\n    // You can do this without explicitly adding |GeometryMetadata| to mesh.\n    this.dracoMeshBuilder.SetMetadataForAttribute(\n      dracoGeometry,\n      uniqueAttributeId,\n      dracoAttributeMetadata\n    );\n  }\n\n  /**\n   * Add contents of object or map to a WASM Draco Metadata Object\n   * @param dracoMetadata - WASM Draco Object\n   * @param metadata\n   */\n  _populateDracoMetadata(\n    dracoMetadata: Metadata,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    for (const [key, value] of getEntries(metadata)) {\n      switch (typeof value) {\n        case 'number':\n          if (Math.trunc(value) === value) {\n            this.dracoMetadataBuilder.AddIntEntry(dracoMetadata, key, value);\n          } else {\n            this.dracoMetadataBuilder.AddDoubleEntry(dracoMetadata, key, value);\n          }\n          break;\n        case 'object':\n          if (value instanceof Int32Array) {\n            this.dracoMetadataBuilder.AddIntEntryArray(dracoMetadata, key, value, value.length);\n          }\n          break;\n        case 'string':\n        default:\n          this.dracoMetadataBuilder.AddStringEntry(dracoMetadata, key, value);\n      }\n    }\n  }\n}\n\n// HELPER FUNCTIONS\n\n/**\n * Copy encoded data to buffer\n * @param dracoData\n */\nfunction dracoInt8ArrayToArrayBuffer(dracoData: DracoInt8Array) {\n  const byteLength = dracoData.size();\n  const outputBuffer = new ArrayBuffer(byteLength);\n  const outputData = new Int8Array(outputBuffer);\n  for (let i = 0; i < byteLength; ++i) {\n    outputData[i] = dracoData.GetValue(i);\n  }\n  return outputBuffer;\n}\n\n/** Enable iteration over either an object or a map */\nfunction getEntries(container) {\n  const hasEntriesFunc = container.entries && !container.hasOwnProperty('entries');\n  return hasEntriesFunc ? container.entries() : Object.entries(container);\n}\n","import type {Writer, WriterOptions} from '@loaders.gl/loader-utils';\nimport type {DracoMesh} from './lib/draco-types';\nimport type {DracoBuildOptions} from './lib/draco-builder';\nimport DRACOBuilder from './lib/draco-builder';\nimport {loadDracoEncoderModule} from './lib/draco-module-loader';\nimport {VERSION} from './lib/utils/version';\n\nexport type DracoWriterOptions = WriterOptions & {\n  draco?: DracoBuildOptions & {\n    attributeNameEntry: string;\n  };\n};\n\nconst DEFAULT_DRACO_OPTIONS = {\n  pointcloud: false, // Set to true if pointcloud (mode: 0, no indices)\n  attributeNameEntry: 'name'\n  // Draco Compression Parameters\n  // method: 'MESH_EDGEBREAKER_ENCODING',\n  // speed: [5, 5],\n  // quantization: {\n  //   POSITION: 10\n  // }\n};\n\n/**\n * Exporter for Draco3D compressed geometries\n */\nexport const DracoWriter: Writer = {\n  name: 'DRACO',\n  id: 'draco',\n  module: 'draco',\n  version: VERSION,\n  extensions: ['drc'],\n  encode,\n  options: {\n    draco: DEFAULT_DRACO_OPTIONS\n  }\n};\n\nasync function encode(data: DracoMesh, options: DracoWriterOptions = {}): Promise<ArrayBuffer> {\n  // Dynamically load draco\n  const {draco} = await loadDracoEncoderModule(options);\n  const dracoBuilder = new DRACOBuilder(draco);\n\n  try {\n    return dracoBuilder.encodeSync(data, options.draco);\n  } finally {\n    dracoBuilder.destroy();\n  }\n}\n","import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport type {DracoMesh, DracoLoaderData} from './lib/draco-types';\nimport type {DracoLoaderOptions} from './draco-loader';\nimport {DracoLoader as DracoWorkerLoader} from './draco-loader';\nimport DracoParser from './lib/draco-parser';\nimport {loadDracoDecoderModule} from './lib/draco-module-loader';\nimport {VERSION} from './lib/utils/version';\nimport {isBrowser} from '@loaders.gl/worker-utils';\n\n// Draco data types\n\nexport type {DracoMesh, DracoLoaderData};\n\n// Draco Writer\n\nexport type {DracoWriterOptions} from './draco-writer';\nexport {DracoWriter} from './draco-writer';\n\n/**\n * Browser worker doesn't work because of issue during \"draco_encoder.js\" loading.\n * Refused to execute script from 'https://raw.githubusercontent.com/google/draco/1.4.1/javascript/draco_encoder.js' because its MIME type ('') is not executable.\n */\nexport const DracoWriterWorker = {\n  id: isBrowser ? 'draco-writer' : 'draco-writer-nodejs',\n  name: 'Draco compressed geometry writer',\n  module: 'draco',\n  version: VERSION,\n  worker: true,\n  options: {\n    draco: {},\n    source: null\n  }\n};\n\n// Draco Loader\n\nexport type {DracoLoaderOptions};\nexport {DracoWorkerLoader};\n\n/**\n * Loader for Draco3D compressed geometries\n */\nexport const DracoLoader = {\n  ...DracoWorkerLoader,\n  parse\n};\n\nasync function parse(arrayBuffer: ArrayBuffer, options?: DracoLoaderOptions): Promise<DracoMesh> {\n  const {draco} = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n  try {\n    return dracoParser.parseSync(arrayBuffer, options?.draco);\n  } finally {\n    dracoParser.destroy();\n  }\n}\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckDracoLoader: LoaderWithParser = DracoLoader;\n"],"sourceRoot":""}