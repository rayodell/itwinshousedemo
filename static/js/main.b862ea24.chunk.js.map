{"version":3,"sources":["history.ts","SmartDeviceApi.ts","components/markers/smartdevicemarkers.tsx","components/decorators/smartdevicedecorator.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["history","createBrowserHistory","SmartDeviceAPI","fetch","json","SmartDeviceMarker","Marker","constructor","location","size","smartDeviceId","smartedevicetype","cloudData","elementId","super","_smartDeviceId","_devicetype","_elementid","this","setImageUrl","title","populateTitle","smartTable","key","value","Object","entries","smartTableDiv","document","createElement","className","innerHTML","onMouseButton","_ev","isDown","IModelApp","notifications","outputMessage","NotifyMessageDetails","OutputMessagePriority","Info","viewManager","selectedView","zoomToElements","animateFrustumChange","standardViewId","StandardViewId","RightIso","SmartDeviceDecorator","vp","_imodel","_markerset","iModel","addMarkers","results","query","undefined","rowFormat","QueryRowFormat","UseJsPropertyNames","values","row","console","log","push","getSmartDeviceData","GetData","forEach","smartDeviceMarker","x","origin","y","z","smartDeviceType","id","decorate","context","marker","addDecoration","App","iModelId","setIModelId","useState","process","iTwinId","setITwinId","accessToken","useAccessToken","authClient","useMemo","BrowserAuthorizationClient","scope","clientId","redirectUri","postSignoutRedirectUri","responseType","authority","login","useCallback","async","signInSilent","signIn","useEffect","urlParams","URLSearchParams","window","search","has","get","viewConfiguration","viewPort","Promise","resolve","reject","start","Date","intvl","setInterval","areAllTileTreesLoaded","ViewerPerformance","addMark","addMeasure","clearInterval","getTime","finally","tools","run","FitViewTool","toolId","view","setStandardRotation","Iso","viewCreatorOptions","viewportConfigurer","onIModelAppInit","TreeWidget","initialize","PropertyGridManager","MeasureTools","startup","ProgressLinear","indeterminate","labels","enablePerformanceMonitors","uiProviders","ViewerNavigationToolsProvider","ViewerContentToolsProvider","vertical","measureGroup","ViewerStatusbarItemsProvider","TreeWidgetUiItemsProvider","PropertyGridUiItemsProvider","enableCopyingPropertyText","MeasureToolsUiItemsProvider","onIModelConnected","onViewOpen","addOnce","changeCategoryDisplay","overrideDisplayStyle","viewflags","visEdges","shadows","toString","result","categoryIds","addDecorator","Boolean","hostname","match","redirectUrl","URL","pathname","BrowserAuthorizationCallbackHandler","handleSigninCallback","catch","error","ReactDOM","render","StrictMode","getElementById","unregister","navigator","serviceWorker","ready","then","registration","message"],"mappings":"qQAOO,MAAMA,EAAUC,c,WCPhB,MAAMC,eAET,uBAKI,aAJuBC,MAAM,oDAEDC,MAGhC,ECJG,MAAMC,6CAA0BC,SAMnCC,YAAYC,EAAgBC,EAAYC,EAAsBC,EAAyBC,EAAcC,GACjGC,MAAMN,EAASC,GAAM,KALjBM,oBAAc,OACdC,iBAAW,OACXC,gBAAU,EAKdC,KAAKH,eAAiBL,EACtBQ,KAAKF,YAAYL,EACjBO,KAAKD,WAAWJ,EAChBK,KAAKC,YAAa,IAAGD,KAAKF,mBAE1BE,KAAKE,MAAOF,KAAKG,cAAcT,EAEnC,CAEQS,cAAcT,GAGlB,IAAIU,EAAa,GAEjB,IAAI,MAAOC,EAAIC,KAAUC,OAAOC,QAAQd,GAEpCU,GAAa,2CAEHC,+BACAC,0CAKd,MAAMG,EAAgBC,SAASC,cAAc,OAS7C,OARAF,EAAcG,UAAU,cACxBH,EAAcI,UAAW,iBACnBb,KAAKH,iDAETO,gCAIKK,CACX,CAEOK,cAAcC,GAOjB,OANIA,EAAIC,SAEJC,YAAUC,cAAcC,cAAc,IAAIC,uBAAqBC,wBAAsBC,KAAK,WAAatB,KAAKH,eAAiB,oBAC7HoB,YAAUM,YAAYC,aAAcC,eAAezB,KAAKD,WAAW,CAAC2B,sBAAqB,EAAKC,eAAeC,iBAAeC,aAGzH,CACX,EClDG,MAAMC,0CAKTzC,YAAY0C,GAAqB,KAHzBC,aAAO,OACPC,gBAAU,EAGdjC,KAAKgC,QAAUD,EAAGG,OAClBlC,KAAKiC,WAAa,GAElBjC,KAAKmC,YACT,CAEA,2BACI,MAEMC,EAAUpC,KAAKgC,QAAQK,MAFd,yIAE0BC,EAAU,CAACC,UAAUC,iBAAeC,qBACvEC,EAAS,GAEf,UAAW,MAAMC,KAAOP,EAEpBQ,QAAQC,IAAIF,GACZD,EAAOI,KAAKH,GAIhB,OAAOD,CAEX,CAEA,mBACI,MAAMA,QAAe1C,KAAK+C,qBACpBrD,QAAkBV,eAAegE,UAEvCN,EAAOO,SAAQ3C,IACX,MAAM4C,EAAoB,IAAI/D,qCAC1B,CAACgE,EAAG7C,EAAM8C,OAAOD,EAAGE,EAAG/C,EAAM8C,OAAOC,EAAEC,EAAEhD,EAAM8C,OAAOE,GACrD,CAACH,EAAE,GAAGE,EAAE,IACR/C,EAAMd,cACNc,EAAMiD,gBACN7D,EAAUY,EAAMd,eAChBc,EAAMkD,IAKVxD,KAAKiC,WAAWa,KAAKI,EAAkB,GAK/C,CAKOO,SAASC,GACZ1D,KAAKiC,WAAWgB,SAAQU,GACpBA,EAAOC,cAAcF,IAC7B,E,aC8KWG,YAvMO,KACpB,MAAOC,EAAUC,GAAeC,mBAASC,yCAClCC,EAASC,GAAcH,mBAASC,wCAEjCG,EAAcC,cAEdC,EAAaC,mBACjB,sBACE,IAAIC,IAA2B,CAC7BC,MAA0C,QAArC,EAAER,mDAAmC,EAAI,GAC9CS,SAAgD,QAAxC,EAAET,iCAAsC,EAAI,GACpDU,YAAsD,QAA3C,EAAEV,yCAAyC,EAAI,GAC1DW,uBAAwBX,+BACxBY,aAAc,OACdC,UAAWb,2BACX,GACJ,IAGIc,EAAQC,uBAAYC,UACxB,UACQX,EAAWY,cAGnB,CAFE,YACMZ,EAAWa,QACnB,IACC,CAACb,IAEJc,qBAAU,KACHL,GAAO,GACX,CAACA,IAEJK,qBAAU,KACR,GAAIhB,EAAa,CACf,MAAMiB,EAAY,IAAIC,gBAAgBC,OAAOjG,SAASkG,QAClDH,EAAUI,IAAI,YAChBtB,EAAWkB,EAAUK,IAAI,YASvBL,EAAUI,IAAI,aAChB1B,EAAYsB,EAAUK,IAAI,YAQ9B,IACC,CAACtB,IAEJgB,qBAAU,KACJhB,GAAeF,GAAWJ,GAC5BhF,EAAQgE,KAAM,YAAWoB,cAAoBJ,IAC/C,GACC,CAACM,EAAaF,EAASJ,IAO1B,MAAM6B,EAAoBX,uBAAaY,IAG5B,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAQ,IAAIC,KACZC,EAAQC,aAAY,KACpBP,EAASQ,wBACXC,IAAkBC,QAAQ,eACrBD,IAAkBE,WACrB,kBACA,iBACA,eAEFC,cAAcN,GACdJ,GAAQ,KAEE,IAAIG,MAERQ,UAAYT,EAAMS,UAAY,KACpCV,GACF,GACC,IAAI,IAIOW,SAAQ,KACnBzF,YAAU0F,MAAMC,IAAIC,cAAYC,OAAQlB,GAAU,GAAM,GAC7DA,EAASmB,KAAKC,oBAAoBpF,iBAAeqF,IAAI,GACrD,GACD,IAEGC,EAAqB3C,mBACzB,MAAS4C,mBAAoBxB,KAC7B,CAACA,IAGGyB,EAAkBpC,uBAAYC,gBAC5BoC,IAAWC,mBACXC,IAAoBD,mBACpBE,IAAaC,SAAS,GAC3B,IAwDH,OACE,sBAAK7G,UAAU,mBAAkB,WAC7BwD,GACA,cAAC,IAAY,UACX,qBAAKxD,UAAU,iBAAgB,SAC7B,cAAC8G,EAAA,EAAc,CAACC,eAAe,EAAMC,OAAQ,CAAC,uBAIpD,cAAC,IAAM,CACL1D,QAAgB,OAAPA,QAAO,IAAPA,IAAW,GACpBJ,SAAkB,OAARA,QAAQ,IAARA,IAAY,GACtBQ,WAAYA,EACZ4C,mBAAoBA,EACpBW,2BAA2B,EAC3BT,gBAAiBA,EACjBU,YAAa,CACX,IAAIC,IACJ,IAAIC,IAA2B,CAC7BC,SAAU,CACRC,cAAc,KAGlB,IAAIC,IACJ,IAAIC,IACJ,IAAIC,IAA4B,CAC9BC,2BAA2B,IAE7B,IAAIC,KAENC,kBAlFqBxG,IAGzBf,YAAUM,YAAYkH,WAAWC,SAAQzD,UACvClD,EAAG4G,sBAAsB,IAAG,GAS5B5G,EAAG6G,qBAP4C,CAC7CC,UAAW,CACTC,UAAS,EACTC,SAAQ,KAMZ,MAeM1G,EAAS,iEAfoB,CACnC,aACA,aACA,iBACA,iBACA,mBACA,gBACA,gBACA,gBACA,gBACA,aACA,kBACA,UAGgG2G,cAE1FC,EAASjH,EAAQK,MAAMA,OAAMC,EAAU,CAACC,UAAUC,iBAAeC,qBAEjEyG,EAAc,GAGpB,UAAW,MAAMvG,KAAOsG,EACtBC,EAAYpG,KAAKH,EAAIa,IAEvBzB,EAAG4G,sBAAsBO,GAAY,GAErCtG,QAAQC,UAAU7D,eAAegE,WAEjC/B,YAAUM,YAAY4H,aAAa,IAAIrH,0CAAqBC,GAAI,GAEhE,MAsCI,EC1NUqH,QACW,cAA7B7D,OAAOjG,SAAS+J,UAEe,UAA7B9D,OAAOjG,SAAS+J,UAEhB9D,OAAOjG,SAAS+J,SAASC,MACvB,2DCON,MAAMC,EAAc,IAAIC,IAAIvF,yCACxBsF,EAAYE,WAAalE,OAAOjG,SAASmK,SAC3CC,IAAoCC,qBAClCJ,EAAYP,YACZY,MAAMhH,QAAQiH,OAEhBC,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,QAAG,MAENtJ,SAASuJ,eAAe,SDoGrB,SAASC,aACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAMC,IACLA,EAAaL,YAAY,IAE1BN,OAAOC,IACNjH,QAAQiH,MAAMA,EAAMW,QAAQ,GAGpC,CCvGAJ,E","file":"static/js/main.b862ea24.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n * Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n * See LICENSE.md in the project root for license terms and full copyright notice.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory();\n","export class SmartDeviceAPI{\r\n\r\n    public static async GetData(){\r\n        const response = await fetch(\"https://smarthomedata.z22.web.core.windows.net/\");\r\n\r\n        const deviceData = response.json();\r\n\r\n        return deviceData;\r\n    }\r\n\r\n}","import { ReactNotifyMessageDetails } from \"@itwin/appui-react\";\r\nimport {BeButtonEvent, Marker,IModelApp, NotifyMessageDetails, OutputMessagePriority, StandardViewId} from \"@itwin/core-frontend\";\r\nimport { XYAndZ,XAndY } from \"@itwin/core-geometry\";\r\n\r\nexport class SmartDeviceMarker extends Marker {\r\n\r\n    private _smartDeviceId: string;\r\n    private _devicetype: string;\r\n    private _elementid:string;\r\n\r\n    constructor(location:XYAndZ,size: XAndY,smartDeviceId: string,smartedevicetype: string,cloudData:any,elementId:string){\r\n        super(location,size);\r\n\r\n        this._smartDeviceId = smartDeviceId;\r\n        this._devicetype=smartedevicetype;\r\n        this._elementid=elementId;\r\n        this.setImageUrl(`/${this._devicetype}.png`);\r\n       \r\n        this.title= this.populateTitle(cloudData);\r\n\r\n    }\r\n\r\n    private populateTitle(cloudData:any)\r\n    {\r\n\r\n        let smartTable = \"\";\r\n\r\n        for(const [key,value] of Object.entries(cloudData))\r\n        {\r\n            smartTable+=`\r\n            <tr>\r\n                <th>${key}</th>\r\n                <th>${value}</th>\r\n            </tr>\r\n            `\r\n        }\r\n\r\n        const smartTableDiv = document.createElement(\"div\");\r\n        smartTableDiv.className='smart-table'\r\n        smartTableDiv.innerHTML=`\r\n        <h3>${this._smartDeviceId}</h3>\r\n        <table>\r\n        ${smartTable}\r\n        </table>\r\n        `\r\n\r\n        return smartTableDiv;\r\n    }\r\n\r\n    public onMouseButton(_ev: BeButtonEvent): boolean {\r\n        if(!_ev.isDown)\r\n        {\r\n            IModelApp.notifications.outputMessage(new NotifyMessageDetails(OutputMessagePriority.Info,\"Element \" + this._smartDeviceId + \" was clicked on\"))\r\n            IModelApp.viewManager.selectedView!.zoomToElements(this._elementid,{animateFrustumChange:true,standardViewId:StandardViewId.RightIso});\r\n        }\r\n        \r\n        return true;\r\n    }\r\n}\r\n\r\n","import { QueryRowFormat } from \"@itwin/core-common\";\r\nimport {DecorateContext, Decorator, IModelConnection, ScreenViewport,Marker} from \"@itwin/core-frontend\";\r\nimport { IModel } from \"@itwin/imodels-client-management\";\r\nimport { SmartDeviceMarker } from \"../markers/smartdevicemarkers\";\r\nimport { SmartDeviceAPI } from \"../../SmartDeviceApi\";\r\n\r\n\r\nexport class SmartDeviceDecorator implements Decorator{\r\n    \r\n    private _imodel: IModelConnection;\r\n    private _markerset: Marker[];\r\n    \r\n    constructor(vp: ScreenViewport) {\r\n        this._imodel = vp.iModel;\r\n        this._markerset = [];\r\n\r\n        this.addMarkers();\r\n    }\r\n\r\n    private async getSmartDeviceData(){\r\n        const query = `Select SmartDeviceID,SmartDeviceType,Origin,ECInstanceId FROM DgnCustomItemTypes_HouseSchema.SmartDevice WHERE Origin is not null`\r\n\r\n        const results = this._imodel.query(query,undefined,{rowFormat:QueryRowFormat.UseJsPropertyNames});\r\n        const values = [];\r\n        \r\n        for await (const row of results)\r\n        {\r\n            console.log(row);\r\n            values.push(row);\r\n        }\r\n           \r\n\r\n        return values;\r\n\r\n    }\r\n\r\n    private async addMarkers(){\r\n        const values = await this.getSmartDeviceData();\r\n        const cloudData = await SmartDeviceAPI.GetData();\r\n\r\n        values.forEach(value=> {\r\n            const smartDeviceMarker = new SmartDeviceMarker(\r\n                {x: value.origin.x, y: value.origin.y,z:value.origin.z},\r\n                {x:40,y:40},\r\n                value.smartDeviceId,\r\n                value.smartDeviceType,\r\n                cloudData[value.smartDeviceId],\r\n                value.id\r\n            )\r\n\r\n\r\n            \r\n            this._markerset.push(smartDeviceMarker);\r\n\r\n        });\r\n\r\n      \r\n    }\r\n\r\n\r\n    \r\n\r\n    public decorate(context: DecorateContext): void {\r\n        this._markerset.forEach(marker=>\r\n            marker.addDecoration(context))\r\n    }\r\n}","/*---------------------------------------------------------------------------------------------\n * Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n * See LICENSE.md in the project root for license terms and full copyright notice.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./App.scss\";\n\nimport { BrowserAuthorizationClient } from \"@itwin/browser-authorization\";\nimport type { IModelConnection, ScreenViewport } from \"@itwin/core-frontend\";\nimport { FitViewTool, IModelApp, StandardViewId } from \"@itwin/core-frontend\";\nimport { FillCentered } from \"@itwin/core-react\";\nimport { ProgressLinear } from \"@itwin/itwinui-react\";\nimport {\n  MeasureTools,\n  MeasureToolsUiItemsProvider,\n} from \"@itwin/measure-tools-react\";\nimport {\n  PropertyGridManager,\n  PropertyGridUiItemsProvider,\n} from \"@itwin/property-grid-react\";\nimport {\n  TreeWidget,\n  TreeWidgetUiItemsProvider,\n} from \"@itwin/tree-widget-react\";\nimport {\n  useAccessToken,\n  Viewer,\n  ViewerContentToolsProvider,\n  ViewerNavigationToolsProvider,\n  ViewerPerformance,\n  ViewerStatusbarItemsProvider,\n} from \"@itwin/web-viewer-react\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport { history } from \"./history\";\nimport { DisplayStyle3dSettingsProps, QueryRowFormat } from \"@itwin/core-common\";\nimport { SmartDeviceAPI } from \"./SmartDeviceApi\";\n\nimport { SmartDeviceDecorator } from \"./components/decorators/smartdevicedecorator\";  \n\nconst App: React.FC = () => {\n  const [iModelId, setIModelId] = useState(process.env.IMJS_IMODEL_ID);\n  const [iTwinId, setITwinId] = useState(process.env.IMJS_ITWIN_ID);\n\n  const accessToken = useAccessToken();\n\n  const authClient = useMemo(\n    () =>\n      new BrowserAuthorizationClient({\n        scope: process.env.IMJS_AUTH_CLIENT_SCOPES ?? \"\",\n        clientId: process.env.IMJS_AUTH_CLIENT_CLIENT_ID ?? \"\",\n        redirectUri: process.env.IMJS_AUTH_CLIENT_REDIRECT_URI ?? \"\",\n        postSignoutRedirectUri: process.env.IMJS_AUTH_CLIENT_LOGOUT_URI,\n        responseType: \"code\",\n        authority: process.env.IMJS_AUTH_AUTHORITY,\n      }),\n    []\n  );\n\n  const login = useCallback(async () => {\n    try {\n      await authClient.signInSilent();\n    } catch {\n      await authClient.signIn();\n    }\n  }, [authClient]);\n\n  useEffect(() => {\n    void login();\n  }, [login]);\n\n  useEffect(() => {\n    if (accessToken) {\n      const urlParams = new URLSearchParams(window.location.search);\n      if (urlParams.has(\"iTwinId\")) {\n        setITwinId(urlParams.get(\"iTwinId\") as string);\n      } else {\n        if (!process.env.IMJS_ITWIN_ID) {\n          throw new Error(\n            \"Please add a valid iTwin ID in the .env file and restart the application or add it to the iTwinId query parameter in the url and refresh the page. See the README for more information.\"\n          );\n        }\n      }\n\n      if (urlParams.has(\"iModelId\")) {\n        setIModelId(urlParams.get(\"iModelId\") as string);\n      } else {\n        if (!process.env.IMJS_IMODEL_ID) {\n          throw new Error(\n            \"Please add a valid iModel ID in the .env file and restart the application or add it to the iModelId query parameter in the url and refresh the page. See the README for more information.\"\n          );\n        }\n      }\n    }\n  }, [accessToken]);\n\n  useEffect(() => {\n    if (accessToken && iTwinId && iModelId) {\n      history.push(`?iTwinId=${iTwinId}&iModelId=${iModelId}`);\n    }\n  }, [accessToken, iTwinId, iModelId]);\n\n  /** NOTE: This function will execute the \"Fit View\" tool after the iModel is loaded into the Viewer.\n   * This will provide an \"optimal\" view of the model. However, it will override any default views that are\n   * stored in the iModel. Delete this function and the prop that it is passed to if you prefer\n   * to honor default views when they are present instead (the Viewer will still apply a similar function to iModels that do not have a default view).\n   */\n  const viewConfiguration = useCallback((viewPort: ScreenViewport) => {\n    // default execute the fitview tool and use the iso standard view after tile trees are loaded\n    const tileTreesLoaded = () => {\n      return new Promise((resolve, reject) => {\n        const start = new Date();\n        const intvl = setInterval(() => {\n          if (viewPort.areAllTileTreesLoaded) {\n            ViewerPerformance.addMark(\"TilesLoaded\");\n            void ViewerPerformance.addMeasure(\n              \"TileTreesLoaded\",\n              \"ViewerStarting\",\n              \"TilesLoaded\"\n            );\n            clearInterval(intvl);\n            resolve(true);\n          }\n          const now = new Date();\n          // after 20 seconds, stop waiting and fit the view\n          if (now.getTime() - start.getTime() > 20000) {\n            reject();\n          }\n        }, 100);\n      });\n    };\n\n    tileTreesLoaded().finally(() => {\n      void IModelApp.tools.run(FitViewTool.toolId, viewPort, true, false);\n      viewPort.view.setStandardRotation(StandardViewId.Iso);\n    });\n  }, []);\n\n  const viewCreatorOptions = useMemo(\n    () => ({ viewportConfigurer: viewConfiguration }),\n    [viewConfiguration]\n  );\n\n  const onIModelAppInit = useCallback(async () => {\n    await TreeWidget.initialize();\n    await PropertyGridManager.initialize();\n    await MeasureTools.startup();\n  }, []);\n\n  const categoriesToHide = \"('Wall 2nd', 'Wall 1st', 'Dry Wall 2nd', 'Dry Wall 1st')\"\n\n  const onIModelConnected = (_imodel: IModelConnection) => {\n\n\n    IModelApp.viewManager.onViewOpen.addOnce(async (vp: ScreenViewport) => {\n      vp.changeCategoryDisplay([],false); \n\n      const viewStyle: DisplayStyle3dSettingsProps = {\n        viewflags: {\n          visEdges:false,\n          shadows:true\n        }\n      }\n\n      vp.overrideDisplayStyle(viewStyle);\n\n      const categoriesToHide: string[] = [\n      \"'Wall 2nd'\", \n      \"'Wall 1st'\", \n      \"'Dry Wall 2nd'\", \n      \"'Dry Wall 1st'\",\n      \"'Brick Exterior'\",\n      \"'Windows 1st'\",\n      \"'Windows 2nd'\",\n      \"'Ceiling 1st'\",\n      \"'Ceiling 2nd'\",\n      \"'Callouts'\",\n      \"'light fixture'\",\n      \"'Roof'\"\n    ]\n\n      const query = `select ecinstanceId from biscore.category where codevalue in (${categoriesToHide.toString()})`\n\n      const result = _imodel.query(query,undefined,{rowFormat:QueryRowFormat.UseJsPropertyNames});\n\n      const categoryIds = [];\n\n\n      for await (const row of result)\n        categoryIds.push(row.id);\n\n      vp.changeCategoryDisplay(categoryIds,false);\n\n      console.log(await SmartDeviceAPI.GetData());\n\n      IModelApp.viewManager.addDecorator(new SmartDeviceDecorator(vp));\n\n    });\n\n  }\n\n\n\n  return (\n    <div className=\"viewer-container\">\n      {!accessToken && (\n        <FillCentered>\n          <div className=\"signin-content\">\n            <ProgressLinear indeterminate={true} labels={[\"Signing in...\"]} />\n          </div>\n        </FillCentered>\n      )}\n      <Viewer\n        iTwinId={iTwinId ?? \"\"}\n        iModelId={iModelId ?? \"\"}\n        authClient={authClient}\n        viewCreatorOptions={viewCreatorOptions}\n        enablePerformanceMonitors={true} // see description in the README (https://www.npmjs.com/package/@itwin/web-viewer-react)\n        onIModelAppInit={onIModelAppInit}\n        uiProviders={[\n          new ViewerNavigationToolsProvider(),\n          new ViewerContentToolsProvider({\n            vertical: {\n              measureGroup: false,\n            },\n          }),\n          new ViewerStatusbarItemsProvider(),\n          new TreeWidgetUiItemsProvider(),\n          new PropertyGridUiItemsProvider({\n            enableCopyingPropertyText: true,\n          }),\n          new MeasureToolsUiItemsProvider(),\n        ]}\n        onIModelConnected = {onIModelConnected}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","/*---------------------------------------------------------------------------------------------\n * Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n * See LICENSE.md in the project root for license terms and full copyright notice.\n *--------------------------------------------------------------------------------------------*/\n/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/*---------------------------------------------------------------------------------------------\n * Copyright (c) Bentley Systems, Incorporated. All rights reserved.\n * See LICENSE.md in the project root for license terms and full copyright notice.\n *--------------------------------------------------------------------------------------------*/\n\nimport \"./index.scss\";\n\nimport { BrowserAuthorizationCallbackHandler } from \"@itwin/browser-authorization\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nif (!process.env.IMJS_AUTH_CLIENT_CLIENT_ID) {\n  throw new Error(\n    \"Please add a valid OIDC client id to the .env file and restart the application. See the README for more information.\"\n  );\n}\nif (!process.env.IMJS_AUTH_CLIENT_SCOPES) {\n  throw new Error(\n    \"Please add valid scopes for your OIDC client to the .env file and restart the application. See the README for more information.\"\n  );\n}\nif (!process.env.IMJS_AUTH_CLIENT_REDIRECT_URI) {\n  throw new Error(\n    \"Please add a valid redirect URI to the .env file and restart the application. See the README for more information.\"\n  );\n}\n\nconst redirectUrl = new URL(process.env.IMJS_AUTH_CLIENT_REDIRECT_URI);\nif (redirectUrl.pathname === window.location.pathname) {\n  BrowserAuthorizationCallbackHandler.handleSigninCallback(\n    redirectUrl.toString()\n  ).catch(console.error);\n} else {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}